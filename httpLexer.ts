// Generated from http.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class httpLexer extends Lexer {
	public static readonly LPAREN = 1;
	public static readonly RPAREN = 2;
	public static readonly LBRACE = 3;
	public static readonly RBRACE = 4;
	public static readonly COLON = 5;
	public static readonly COMMA = 6;
	public static readonly EQUALS = 7;
	public static readonly LET = 8;
	public static readonly PRINT = 9;
	public static readonly GET = 10;
	public static readonly POST = 11;
	public static readonly TO = 12;
	public static readonly FROM = 13;
	public static readonly NAME = 14;
	public static readonly INT = 15;
	public static readonly STRING = 16;
	public static readonly WS = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "COLON", "COMMA", "EQUALS", "LET", 
		"PRINT", "GET", "POST", "TO", "FROM", "NAME", "INT", "STRING", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'{'", "'}'", "':'", "','", "'='", "'let'", "'print'", 
		"'GET'", "'POST'", "'to'", "'from'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COLON", "COMMA", "EQUALS", 
		"LET", "PRINT", "GET", "POST", "TO", "FROM", "NAME", "INT", "STRING", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(httpLexer._LITERAL_NAMES, httpLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return httpLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(httpLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "http.g4"; }

	// @Override
	public get ruleNames(): string[] { return httpLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return httpLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return httpLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return httpLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13l\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x07\x0FQ\n\x0F\f\x0F\x0E\x0FT\v\x0F\x03\x10\x03\x10\x07\x10" +
		"X\n\x10\f\x10\x0E\x10[\v\x10\x03\x11\x03\x11\x07\x11_\n\x11\f\x11\x0E" +
		"\x11b\v\x11\x03\x11\x03\x11\x03\x12\x06\x12g\n\x12\r\x12\x0E\x12h\x03" +
		"\x12\x03\x12\x02\x02\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
		"\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
		"\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13\x03" +
		"\x02\x06\x04\x02C\\c|\x03\x022;\x03\x02$$\x05\x02\v\f\x0E\x0F\"\"\x02" +
		"o\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02" +
		"\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02" +
		"\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05\'" +
		"\x03\x02\x02\x02\x07)\x03\x02\x02\x02\t+\x03\x02\x02\x02\v-\x03\x02\x02" +
		"\x02\r/\x03\x02\x02\x02\x0F1\x03\x02\x02\x02\x113\x03\x02\x02\x02\x13" +
		"7\x03\x02\x02\x02\x15=\x03\x02\x02\x02\x17A\x03\x02\x02\x02\x19F\x03\x02" +
		"\x02\x02\x1BI\x03\x02\x02\x02\x1DN\x03\x02\x02\x02\x1FU\x03\x02\x02\x02" +
		"!\\\x03\x02\x02\x02#f\x03\x02\x02\x02%&\x07*\x02\x02&\x04\x03\x02\x02" +
		"\x02\'(\x07+\x02\x02(\x06\x03\x02\x02\x02)*\x07}\x02\x02*\b\x03\x02\x02" +
		"\x02+,\x07\x7F\x02\x02,\n\x03\x02\x02\x02-.\x07<\x02\x02.\f\x03\x02\x02" +
		"\x02/0\x07.\x02\x020\x0E\x03\x02\x02\x0212\x07?\x02\x022\x10\x03\x02\x02" +
		"\x0234\x07n\x02\x0245\x07g\x02\x0256\x07v\x02\x026\x12\x03\x02\x02\x02" +
		"78\x07r\x02\x0289\x07t\x02\x029:\x07k\x02\x02:;\x07p\x02\x02;<\x07v\x02" +
		"\x02<\x14\x03\x02\x02\x02=>\x07I\x02\x02>?\x07G\x02\x02?@\x07V\x02\x02" +
		"@\x16\x03\x02\x02\x02AB\x07R\x02\x02BC\x07Q\x02\x02CD\x07U\x02\x02DE\x07" +
		"V\x02\x02E\x18\x03\x02\x02\x02FG\x07v\x02\x02GH\x07q\x02\x02H\x1A\x03" +
		"\x02\x02\x02IJ\x07h\x02\x02JK\x07t\x02\x02KL\x07q\x02\x02LM\x07o\x02\x02" +
		"M\x1C\x03\x02\x02\x02NR\t\x02\x02\x02OQ\t\x02\x02\x02PO\x03\x02\x02\x02" +
		"QT\x03\x02\x02\x02RP\x03\x02\x02\x02RS\x03\x02\x02\x02S\x1E\x03\x02\x02" +
		"\x02TR\x03\x02\x02\x02UY\t\x03\x02\x02VX\t\x03\x02\x02WV\x03\x02\x02\x02" +
		"X[\x03\x02\x02\x02YW\x03\x02\x02\x02YZ\x03\x02\x02\x02Z \x03\x02\x02\x02" +
		"[Y\x03\x02\x02\x02\\`\x07$\x02\x02]_\n\x04\x02\x02^]\x03\x02\x02\x02_" +
		"b\x03\x02\x02\x02`^\x03\x02\x02\x02`a\x03\x02\x02\x02ac\x03\x02\x02\x02" +
		"b`\x03\x02\x02\x02cd\x07$\x02\x02d\"\x03\x02\x02\x02eg\t\x05\x02\x02f" +
		"e\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02" +
		"ij\x03\x02\x02\x02jk\b\x12\x02\x02k$\x03\x02\x02\x02\x07\x02RY`h\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!httpLexer.__ATN) {
			httpLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(httpLexer._serializedATN));
		}

		return httpLexer.__ATN;
	}

}

